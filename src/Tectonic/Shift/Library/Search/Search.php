<?php

namespace Tectonic\Shift\Library\Search;

use Eloquent, Event;
use Tectonic\Shift\Library\Contracts\QueryInterface;
use Tectonic\Shift\Library\Search\Filters\SearchFilterFactory;

abstract class Search
{
	/**
	 * Query object that gets used for altering query parameters.etc.
	 * 
	 * @var Query
	 */
	public $query;
	
	/**
	 * Stores the filter factory that contains all the filters to be applied to the search query.
	 * 
	 * @var FilterFactory
	 */
	protected $filterFactory;

	/**
	 * Defines the default limit for paginating result sets.
	 * 
	 * @var integer
	 */
	public $limit = 50;

	/**
	 * Stores the search parameters.
	 * 
	 * @var array
	 */
	public $params = [];

	/**
	 * Add the filter factory to the search object.
	 * 
	 * @param SearchFilterFactory $filterFactory
	 */
	public function setFilters(SearchFilterFactory $filterFactory)
	{
		$this->filterFactory = $filterFactory;
	}

	/**
	 * Applies all filters/conditions to the current query by calling
	 * their relevant methods and then returning the query result.
	 * 
	 * @return array Array of model objects
	 */
	public function results() 
	{
		foreach ($this->filterFactory->filters as $filter) {
			$filter->criteria($this->query);
		}

		return $this->query->paginate($this->limit());
	}

	/**
	 * Sets the params required for search.
	 * 
	 * @param array $params Array of search parameters.
	 */
	public function setParams(array $params)
	{
		$this->params = $params;
	}

	/**
	 * Helper method for retriving the limit value. At the moment, there is
	 * no need to change this. But should we need to update how limit is controlled,
	 * then we can either do it here, or in child classes.
	 * 
	 * @return integer
	 */
	public function limit()
	{
		return $this->limit;
	}

	/**
	 * If any search implementation wishes to be extended by other packages,
	 * then call this method. This will fire an event for this specific
	 * search object.
	 * 
	 * @param string $eventName
	 */
	public function extend($eventName)
	{
		Event::fire('search.'.$eventName, [$this]);
	}

	/**
	 * All query objects generated by the search engine, must be started by a QueryInterface.
	 * This can be a Shift model, which extends Eloquent, or something else that implements 
	 * that interface.
	 * 
	 * @param QueryInterface $query
	 */
	public function setQuery(QueryInterface $query)
	{
		$this->query = $query;
	}

	/**
	 * Retrieve the $query object.
	 * 
	 * @return Query
	 */
	public function getQuery()
	{
		return $this->query;
	}
}
